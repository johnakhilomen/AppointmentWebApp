(()=>{"use strict";eval('\n;// CONCATENATED MODULE: ./src/components/features/section/Section.ts\n\nclass Section {\n    constructor(icon, sectionHeading, sectionText, divClassname = "") {\n        this._iconInlineStyle = ["style", "text-align:center;"];\n        this._component = new Component("Section");\n        this.build = () => {\n            const { iconName, iconClassName } = this._icon;\n            //let sectionIcon = this._component.CreateI(iconName, iconClassName);\n            //sectionIcon.setAttribute(this._iconInlineStyle[0], this._iconInlineStyle[1]);\n            let sectionIcon = this._component.CreateImage(iconName, iconClassName);\n            let sectionHeading = this._component.CreateH("h2", this._sectionHeading, "", "");\n            let sectionText = this._component.CreateP(this._sectionText, "", "");\n            let section = this._component.CreateDivElement([sectionIcon, sectionHeading, sectionText], this._divClassname);\n            return section;\n        };\n        this._icon = icon;\n        this._sectionHeading = sectionHeading;\n        this._sectionText = sectionText;\n        this._divClassname = divClassname;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/Component.ts\n\n/**\n * This class has separate functions for creating or generating HTML elements\n */\nclass Component {\n    constructor(name) {\n        console.log(name + " is loaded!");\n    }\n    CreateElement(element) {\n        return document.createElement(element);\n    }\n    /**\n     * This function creates an H1 element\n     * @param text\n     * @param className\n     * @param id\n     */\n    CreateH(headtype, text, className, id) {\n        let h1 = this.CreateElement(headtype);\n        h1.innerText = text;\n        h1.className = className;\n        h1.id = id;\n        return h1;\n    }\n    /**\n     * This function creates an Anchor element\n     * @param href\n     * @param text\n     * @param className\n     */\n    CreateAnchor(href, text, className = "") {\n        let a = this.CreateElement("a");\n        a.innerText = text;\n        a.href = href;\n        a.className = className;\n        return a;\n    }\n    /**\n     * This function creates a Button element\n     * @param text\n     * @param className\n     */\n    CreateButton(text = "", className = "") {\n        let button = this.CreateElement("button");\n        button.innerText = text;\n        button.className = className;\n        return button;\n    }\n    /**\n     * This function creates a DIV element\n     * @param elements\n     * @param className\n     */\n    CreateDivElement(elements, className = "") {\n        //Create a div element\n        let div = document.createElement("div");\n        div.className = className;\n        if (!elements) {\n            console.log("elements array is null or not defined");\n        }\n        elements.forEach((element) => {\n            div.appendChild(element);\n        });\n        return div;\n    }\n    CreateP(text, className, id) {\n        let p = this.CreateElement("p");\n        p.innerText = text;\n        p.className = className;\n        p.id = id;\n        return p;\n    }\n    /**\n     * This Creates a section element using the Section class\n     * @param searchIcon\n     * @param className\n     * @param sectionHeading\n     * @param sectionText\n     */\n    CreateSection(searchIcon, className, sectionHeading, sectionText, divClassname = "") {\n        let obj = { iconName: searchIcon, iconClassName: className };\n        let section = new Section(obj, sectionHeading, sectionText, divClassname).build();\n        return section;\n    }\n    CreateI(name, className) {\n        let i = this.CreateElement("i");\n        i.className = name + " " + className;\n        return i;\n    }\n    CreateQuote(image, text, className, citerString) {\n        let circleImage = this.CreateImage(image, "circular_image");\n        let citer = this.CreateElement("cite");\n        citer.textContent = citerString;\n        let p = this.CreateP(text, "", "");\n        let blockQuote = this.CreateElement("blockquote");\n        blockQuote.className = className;\n        let blockDiv = this.CreateDivElement([p, citer], "");\n        //blockQuote.appendChild(p);\n        //blockQuote.appendChild(citer)\n        blockQuote.appendChild(circleImage);\n        blockQuote.appendChild(blockDiv);\n        return blockQuote;\n    }\n    CreateImage(name, className) {\n        let img = this.CreateElement("img");\n        img.src = name;\n        img.className = className;\n        return img;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/config/config.ts\nconst homePage = "http://localhost:3000/";\n\n;// CONCATENATED MODULE: ./src/components/features/header/Header.ts\n\n\nclass Header extends Component {\n    constructor(menu) {\n        super("Header");\n        /**\n         * The render function would render the menu, hambugger and nav items\n         * on the <header> HTML elements\n         *\n         */\n        this.render = () => {\n            let header = this.CreateElement("header");\n            header.appendChild(this.CreateAnchor(homePage, "Appointly", "logo"));\n            //We\'ll create a checkbox which we\'d trigger for hambugger menu\n            let checkBox = this.CreateElement("input");\n            checkBox.type = "checkbox";\n            checkBox.id = "nav";\n            let label = this.CreateElement("label");\n            label.htmlFor = "nav";\n            //Append checkbox input on the header element\n            header.appendChild(checkBox);\n            //append the label element on the header element\n            header.appendChild(label);\n            //Create a UL element\n            let uList = this.CreateElement("ui");\n            //Append menu items to UL as LI\n            this.menu.forEach((m) => {\n                //Iterate the menu items and create an li element for each menu item\n                let li = this.CreateElement("li");\n                //Create an anchor element with the title prop\n                let anchorEle = this.CreateAnchor("", m.title);\n                //Bind the event prop to the onclick of the anchorElement\n                anchorEle.onclick = m.evt;\n                //Append an anchor element to the li element\n                li.appendChild(anchorEle);\n                //append the li to the ul element\n                uList.appendChild(li);\n            });\n            //Create button element as single LI\n            let signupButton = this.CreateAnchor("", "Sign up", "button button3");\n            signupButton.onclick = () => {\n                history.pushState(null, "", "/signup");\n            };\n            //Create an LI Element for signup button\n            let signUpLiElement = this.CreateElement("li");\n            //append button to LI Element\n            signUpLiElement.appendChild(signupButton);\n            //append LI Element to UL Element\n            uList.appendChild(signUpLiElement);\n            this.nav(header, uList);\n            return header;\n        };\n        this.nav = (header, uList) => {\n            let nav = this.CreateElement("nav");\n            nav.appendChild(uList);\n            header.appendChild(nav);\n        };\n        this.menu = menu;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/header/SubHeaderContent.ts\n/* harmony default export */ const SubHeaderContent = ({\n    p1: "Appointly helps you manage and administer your appointment schedules",\n    p2: "and help make communication easier during these challenging times."\n});\n\n;// CONCATENATED MODULE: ./src/components/features/header/SubHeader.ts\n\n\nclass SubHeader extends Component {\n    constructor() {\n        super("SubHeader");\n        this.render = () => {\n            let text1 = this.CreateP(SubHeaderContent.p1, "", "");\n            let text2 = this.CreateP(SubHeaderContent.p2, "", "");\n            let sectionelement = this.CreateDivElement([text1, text2], "informationbar");\n            return sectionelement;\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/header/HeaderEnds.ts\n\nclass HeaderEnds extends Component {\n    constructor(mainText, subText) {\n        super("HeaderEnds");\n        this.noCreditCard = this.CreateP("No credit card required", "", "");\n        this.render = () => {\n            //Create h1 element\n            let mainText = this.CreateH("h1", this._mainText, "whiteHeader", "");\n            //Create paragraph element\n            let subText = this.CreateP(this._subText, "whiteHeader", "");\n            let br = this.CreateElement("br");\n            //Create sign up button\n            let signupButton = this.CreateAnchor("#", "Sign up", "button button3");\n            //Create a paragraph element\n            //this.noCreditCard = this.CreateP("No credit card required", "", "");\n            //Set inline style for paragraph element\n            //this.noCreditCard.setAttribute("style", "color:white; letter-spacing: 1px; text-decoration: underline");\n            //create div element\n            let headerEndsContainer = this.CreateDivElement([mainText, br, subText, br, signupButton, br, this.noCreditCard], "headerEndsContainer");\n            let sectionelement = this.CreateDivElement([headerEndsContainer], "headerEnds");\n            return sectionelement;\n        };\n        this._mainText = mainText;\n        this._subText = subText;\n        this.noCreditCard.setAttribute("style", "color:white; letter-spacing: 1px; text-decoration: underline");\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/getStarted/GetStarted.ts\n\n\nclass GetStarted {\n    constructor(buttonText, buttonClassName, headerText) {\n        this._component = new Component("GetStarted");\n        this.render = () => {\n            let header = this._component.CreateH("h1", this._headerText, "", "");\n            header.setAttribute("style", "text-align:center");\n            let button = this._component.CreateAnchor("", this._buttonText, this._buttonClassName);\n            //button.setAttribute("style", "left:25%; position: relative; width: 250px");\n            //A div element rendering a h1, button and noCreditCard components (the noCreditCard comes from the HeaderEnds class )\n            let noCreditCard = new HeaderEnds().noCreditCard;\n            noCreditCard.setAttribute("style", "color:black; text-align:center; text-decoration: underline");\n            let div = this._component.CreateDivElement([header, button, noCreditCard], "getStarted");\n            //div.setAttribute("style", "display: flex; flex-direction: column; justify-content: center");\n            return div;\n        };\n        this._buttonText = buttonText;\n        this._headerText = headerText;\n        this._buttonClassName = buttonClassName;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/testimonials/Testimonial.ts\n\nclass Testimonial {\n    constructor(className, textContent, citer, imageUrl) {\n        this.component = new Component("Testimonials");\n        this.render = () => {\n            let blockQuote = this.component.CreateQuote(this._imageUrl, this._textContent, this._className, this._citer);\n            let div = this.component.CreateDivElement([blockQuote], "blockQuoteDiv");\n            return div;\n        };\n        this._className = className;\n        this._textContent = textContent;\n        this._citer = citer;\n        this._imageUrl = imageUrl;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/body/BodyContent.ts\n/* harmony default export */ const BodyContent = ([\n    {\n        icon: `/images/icons/sales.png`,\n        title: "Close more sales",\n        text: `When prospects can book you at the peak of their interest, you\'ll see up to a 300% increase in conversion rates and closed sales.`\n    },\n    {\n        icon: `/images/icons/address-book.png`,\n        title: "Manage your appointments",\n        text: `Up to 80% time saved from eliminating back-and-forth, manual reminders & appointment administration tasks means you\'ll close sales faster.`\n    },\n    {\n        icon: `/images/icons/customer-review.png`,\n        title: "Gain Loyal Customers",\n        text: `Your customers & prospects will love the convenience sand simplicity of online booking. Boost their confidence in you and stand out from the crowd.`\n    },\n]);\n\n;// CONCATENATED MODULE: ./src/components/features/body/WhatyoullfindContent.ts\n/* harmony default export */ const WhatyoullfindContent = ([\n    {\n        icon: `/images/icons/sales.png`,\n        title: "Appointment scheduling",\n        text: `Schedule and manage appointments easily`\n    },\n    {\n        icon: `/images/icons/address-book.png`,\n        title: "Appointment integration",\n        text: `Integrate your appointments with other platforms like Google, Teams and Zoom`\n    },\n    {\n        icon: `/images/icons/customer-review.png`,\n        title: "Calendar access",\n        text: `Easily share your availability with your customers`\n    },\n]);\n\n;// CONCATENATED MODULE: ./src/components/features/body/TestimonialsContent.ts\n/* harmony default export */ const TestimonialsContent = ([\n    {\n        citer: "Rodrigo Sanchez",\n        quote: `Just used Appointly for the first time. OMG that is a magical experience. I\'ll never stop using Appointly.`,\n        image: "/images/people/people1.jpg"\n    },\n    {\n        citer: "Rodrigo Sanchez",\n        quote: `Appointly was a game-changer for us in our company. It made our appointment scheduling easy to manage. The automatic email reminder feature almost doubled our conversion rate .`,\n        image: "/images/people/people1.jpg"\n    },\n    {\n        citer: "Rodrigo Sanchez",\n        quote: `I love the interface. It\'s easy to make appointments! I couldn\'t be happier with the service and I recommend it to everyone who has an online business.`,\n        image: "/images/people/people1.jpg"\n    },\n    {\n        citer: "Rodrigo Sanchez",\n        quote: `This tool is simple to use and it has contributed to over $1 million dollars in revenue in the last 8 months so the results speak for themselves`,\n        image: "/images/people/people1.jpg"\n    }\n]);\n\n;// CONCATENATED MODULE: ./src/components/features/body/body.ts\n\n\n\n\n\n\nclass Body extends Component {\n    constructor() {\n        super("Body");\n        this.render = () => {\n            let upperBodyDivHeading = this.CreateH("h2", "What you will find on Appointly ", "", "");\n            //upperBodyDivHeading.setAttribute("style", "margin: 0px auto");\n            let optionsdivelements = [];\n            WhatyoullfindContent.forEach(item => {\n                optionsdivelements.push(this.CreateSection(item.icon, "icon", item.title, item.text, "whatyoullfinddivelement"));\n            });\n            let optiondivs = this.CreateDivElement(optionsdivelements, "whatyoullfinddivs");\n            let whatyoullfinddiv = this.CreateDivElement([upperBodyDivHeading, optiondivs], "");\n            let upperBodyDiv = this.CreateDivElement([whatyoullfinddiv], "upperBody");\n            let element = [];\n            BodyContent.forEach(item => {\n                element.push(this.CreateSection(item.icon, "icon", item.title, item.text));\n            });\n            let mainBodyDiv = this.CreateDivElement(element, "mainBody");\n            //Testimonials body section\n            const testimonialClassname = "testimonial";\n            const testimonialDivClassname = "testimonialDiv";\n            let quote1 = new Testimonial(testimonialClassname, TestimonialsContent[0].quote, TestimonialsContent[0].citer, TestimonialsContent[0].image).render();\n            let quote2 = new Testimonial(testimonialClassname, TestimonialsContent[1].quote, TestimonialsContent[1].citer, TestimonialsContent[1].image).render();\n            let quote3 = new Testimonial(testimonialClassname, TestimonialsContent[2].quote, TestimonialsContent[2].citer, TestimonialsContent[2].image).render();\n            let quote4 = new Testimonial(testimonialClassname, TestimonialsContent[3].quote, TestimonialsContent[3].citer, TestimonialsContent[3].image).render();\n            let testimonialsBodyDiv = this.CreateDivElement([quote1, quote2], testimonialDivClassname);\n            let testimonialsBodyDiv2 = this.CreateDivElement([quote3, quote4], testimonialDivClassname);\n            //Get Started section\n            let getStarted = new GetStarted("Get started", "button button3", "Stop losing hot prospects to email overload and start your trial today!").render();\n            let whatpeopleareSaying = this.CreateH("h2", "What people are saying", "", "");\n            whatpeopleareSaying.setAttribute("style", "text-align: center");\n            //Populate body\'s main div with components\n            let bodyDiv = this.CreateDivElement([mainBodyDiv, this.CreateElement("br"), this.CreateElement("hr"), upperBodyDiv, this.CreateElement("br"), this.CreateElement("hr"), whatpeopleareSaying, this.CreateElement("br"), testimonialsBodyDiv, testimonialsBodyDiv2, this.CreateElement("br"), getStarted]);\n            return bodyDiv;\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/footer/Footer.ts\n\nclass Footer {\n    constructor(toc) {\n        this.component = new Component("Footer.js");\n        this.render = () => {\n            let elements = [];\n            if (this._toc) {\n                this._toc.forEach(x => {\n                    let p = this.component.CreateAnchor(x.href, x.text, x.className);\n                    elements.push(p);\n                });\n            }\n            let h2 = this.component.CreateH("h2", "Appointly", "", "");\n            let p = this.component.CreateP("Copyright © 2021 Appointly", "", "");\n            let tocdiv = this.component.CreateDivElement(elements, "tocDiv");\n            let socialdiv = this.component.CreateDivElement([this.component.CreateI("fab fa-facebook-square", ""),\n                this.component.CreateI("fab fa-twitter", ""), this.component.CreateI("fab fa-instagram", "")], "socialDiv");\n            let textdiv = this.component.CreateDivElement([h2, p], "");\n            let div = this.component.CreateDivElement([tocdiv, socialdiv, textdiv], "footerDiv");\n            return div;\n        };\n        this._toc = toc;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/footer/FooterContent.ts\n/* harmony default export */ const FooterContent = ([\n    {\n        href: "",\n        text: "Home",\n        className: ""\n    },\n    {\n        href: "",\n        text: "How it works",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Features",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Case studies",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Signup",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Login",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Blog",\n        className: ""\n    },\n    {\n        href: "",\n        text: "About",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Support",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Partner with us",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Blog",\n        className: ""\n    },\n    {\n        href: "",\n        text: "About",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Support",\n        className: ""\n    },\n    {\n        href: "",\n        text: "Partner with us",\n        className: ""\n    }\n]);\n\n;// CONCATENATED MODULE: ./src/components/features/header/HeaderContent.ts\n/* harmony default export */ const HeaderContent = ([\n    {\n        title: "How it works",\n        evt: () => {\n            history.pushState(null, "", "/howitworks");\n        }\n    },\n    {\n        title: "Features",\n        evt: () => {\n            //new FeaturesPage();\n            history.pushState(null, "", "/features");\n        }\n    },\n    {\n        title: "Terms",\n        evt: () => {\n        }\n    },\n    {\n        title: "Log in",\n        evt: () => {\n            history.pushState(null, "", "/login");\n        }\n    }\n]);\n\n;// CONCATENATED MODULE: ./src/components/pages/AppContent.ts\n/* harmony default export */ const AppContent = ({\n    headerEnds: "Schedule your next meeting with Appointly",\n    subText: "Take control of your appointment scheduling and accomplish more"\n});\n\n;// CONCATENATED MODULE: ./src/components/pages/App.ts\n\n\n\n\n\n\n\n\n\nconst HeaderComponent = new Header(HeaderContent).render();\nconst SubHeaderComponent = new SubHeader().render();\nconst HeaderEndsComponent = new HeaderEnds(AppContent.headerEnds, AppContent.subText).render();\nclass App extends Component {\n    constructor() {\n        super("App");\n        this.render = (component) => {\n            component.appendChild(HeaderComponent);\n            component.appendChild(SubHeaderComponent);\n            component.appendChild(HeaderEndsComponent);\n            component.appendChild(new Body().render());\n            component.appendChild(new Footer(this._footerContent).render());\n        };\n        this._footerContent = FooterContent;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/pages/featurePageContent.ts\n/* harmony default export */ const featurePageContent = ([\n    {\n        icon: `/images/icons/responsive-design.png`,\n        title: "Works on multiple devices",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        icon: `/images/icons/auto-update.png`,\n        title: "Supports different Time Zones",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        icon: `/images/icons/google.png`,\n        title: "Sync with Google Calendar",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.s`\n    },\n    {\n        icon: `/images/icons/notification.png`,\n        title: "Receive Reminders & Confirmations",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        icon: `/images/icons/schedule.png`,\n        title: "Schedule appointments",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        icon: `far fa-grin-hearts`,\n        title: "Gain Loyal Customers",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.s`\n    },\n    {\n        icon: `/images/icons/font.png`,\n        title: "Multiple language support",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        icon: `/images/icons/file.png`,\n        title: "Downloads",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        icon: `/images/icons/customer-service.png`,\n        title: "Customers service",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.s`\n    }\n]);\n\n;// CONCATENATED MODULE: ./src/components/pages/FeaturesPage.ts\n\n\n\n\n\n\nclass FeaturesPage extends Component {\n    constructor(divRoot) {\n        super("FeaturesPage");\n        this.mainBody = () => {\n            let elements = [];\n            featurePageContent.forEach(item => {\n                elements.push(this.CreateSection(item.icon, "icon", item.title, item.text));\n            });\n            let mainBodyDiv = this.CreateDivElement(elements, "featuresMainBody");\n            return mainBodyDiv;\n        };\n        //let divRoot = document.querySelector("#root") as HTMLInputElement;\n        divRoot.innerHTML = "";\n        divRoot.appendChild(HeaderComponent);\n        divRoot.appendChild(SubHeaderComponent);\n        let HeaderEndsComponent = new HeaderEnds(`Modern scheduling features so you can work less and sell more`, ` `).render();\n        HeaderEndsComponent.setAttribute("style", "background-image: url(./images/bg2.png)");\n        divRoot.appendChild(HeaderEndsComponent);\n        divRoot.appendChild(this.mainBody());\n        divRoot.appendChild(new Footer(FooterContent).render());\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/pages/HowitworkPageContent.ts\n/* harmony default export */ const HowitworkPageContent = ([\n    {\n        image: `/images/icons/responsive-design.png`,\n        title: "Works on multiple devices",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        image: `/images/icons/auto-update.png`,\n        title: "Supports different Time Zones",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.`\n    },\n    {\n        image: `/images/icons/google.png`,\n        title: "Sync with Google Calendar",\n        text: `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sit amet magna vel purus volutpat placerat.s`\n    }\n]);\n\n;// CONCATENATED MODULE: ./src/components/features/howitworks/howitworkSection.ts\n\nclass HowitworkSection {\n    constructor(image, sectionHeading, sectionText) {\n        this._component = new Component("Section");\n        this.build = () => {\n            let image = this._component.CreateImage(this._image, "");\n            let leftdiv = this._component.CreateDivElement([image], "howitworksectionleft");\n            let rightsectionHeading = this._component.CreateH("h2", this._sectionHeading, "", "");\n            let rightsectionText = this._component.CreateP(this._sectionText, "", "");\n            let rightdiv = this._component.CreateDivElement([rightsectionHeading, rightsectionText], "howitworksectionright");\n            let div = this._component.CreateDivElement([leftdiv, rightdiv], "howitworksection");\n            return div;\n        };\n        this._image = image;\n        this._sectionHeading = sectionHeading;\n        this._sectionText = sectionText;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/pages/HowitworksPage.ts\n\n\n\n\n\n\n\nclass HowitworksPage extends Component {\n    constructor(divRoot) {\n        super("HowitworksPage");\n        this.mainBody = () => {\n            let htmlEle = [];\n            HowitworkPageContent.forEach(item => {\n                htmlEle.push(new HowitworkSection(item.image, item.title, item.text).build());\n                htmlEle.push(this.CreateImage("/images/down-arrow.png", "arrow"));\n            });\n            //remove the last arrow\n            htmlEle.splice(htmlEle.length - 1, 1);\n            return this.CreateDivElement(htmlEle, "howitworksMainBody");\n        };\n        divRoot.innerHTML = "";\n        divRoot.appendChild(HeaderComponent);\n        divRoot.appendChild(SubHeaderComponent);\n        let HeaderEndsComponent = new HeaderEnds(`It\'s simple to use Appointly`, ` `).render();\n        HeaderEndsComponent.setAttribute("style", "background-image: url(./images/bg2.png)");\n        divRoot.appendChild(HeaderEndsComponent);\n        divRoot.appendChild(this.mainBody());\n        divRoot.appendChild(new Footer(FooterContent).render());\n    }\n}\n\n;// CONCATENATED MODULE: ./src/enums/ElementType.ts\nvar ElementType;\n(function (ElementType) {\n    ElementType["INPUT_TEXT"] = "text";\n    ElementType["INPUT_CHECKBOX"] = "checkbox";\n    ElementType["INPUT_RADIO"] = "radio";\n    ElementType["INPUT_PASSWORD"] = "password";\n    ElementType["FORM"] = "";\n    ElementType["BUTTON"] = "";\n})(ElementType || (ElementType = {}));\n\n;// CONCATENATED MODULE: ./src/eventHandlers/CustomEvent.ts\nclass DocumentCustomEvent {\n    constructor(evtName) {\n        this.evtName = evtName;\n    }\n    Create(evtStr) {\n        //Initialize custom event detail value with value from event target\n        var customEvent = new CustomEvent(this.evtName, { detail: evtStr });\n        return customEvent;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/forms/FormElement.ts\n\nclass FormElement {\n    constructor(id, className, eventType, dispatcherName) {\n        this.Input = (type) => {\n            //let inputEvt : InputEvent = new InputEvent();    \n            let newInput = this.CreateElement("input");\n            newInput.id = this.id;\n            newInput.className = this.className;\n            newInput.type = type;\n            newInput.setAttribute("required", "required");\n            newInput.addEventListener(this.eventType, this.InputEvent);\n            return newInput;\n        };\n        this.InputEvent = (e) => {\n            //cast evt as HTMLInputElement\n            let evt = e.target;\n            // Create custom event\n            let documentCustomEvent = new DocumentCustomEvent(this.dispatcherName);\n            //Trigger custom event\n            document.dispatchEvent(documentCustomEvent.Create(evt.value));\n        };\n        this.FormEvent = (e) => {\n            //cast evt as HTMLInputElement\n            let evt = e.target;\n            // Create custom event\n            let documentCustomEvent = new DocumentCustomEvent(this.dispatcherName);\n            //Trigger custom event\n            document.dispatchEvent(documentCustomEvent.Create(evt.value));\n        };\n        this.id = id;\n        this.className = className;\n        this.eventType = eventType || "";\n        this.dispatcherName = dispatcherName;\n    }\n    Button() {\n        let newInput = this.CreateElement("button");\n        newInput.id = this.id;\n        newInput.className = this.className;\n        //newInput.addEventListener(this.eventType, this.InputEvent);\n        return newInput;\n    }\n    CreateElement(element) {\n        return document.createElement(element);\n    }\n    Form(buttonText, buttonClassName, elements, labels) {\n        let form = this.CreateElement("form");\n        form.id = this.id;\n        form.className = this.className;\n        elements.forEach((element, i) => {\n            let label = this.CreateElement("label");\n            label.textContent = labels[i];\n            form.appendChild(label);\n            form.appendChild(element);\n        });\n        let button = this.CreateElement("button");\n        button.innerText = buttonText;\n        button.className = buttonClassName;\n        button.setAttribute("style", "padding-top: 10px;padding-bottom: 30px");\n        form.appendChild(button);\n        form.addEventListener(this.eventType, this.FormEvent);\n        return form;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/forms/CreateForm.ts\n\n\nclass CreateForm {\n    constructor(id, className, buttonText, elements, labels) {\n        /**\n         * This will build a form component\n         */\n        this.build = () => {\n            let form = new FormElement(this.id, this.className, "submit", "formSubmit");\n            let elementsArr = [];\n            this.elements.forEach((element) => {\n                let input = new FormElement(element.id, element.className, element.eventType, element.dispatcherName);\n                //if(element.elementType === ElementType.INPUT_TEXT) {\n                /*document.addEventListener(element.dispatcherName, (e) => {\n                    let y = e as CustomEvent;\n                    console.log(y.detail);\n                });*/\n                if (element.elementType == ElementType.INPUT_PASSWORD) {\n                    elementsArr.push(input.Input("password"));\n                }\n                else if (element.elementType == ElementType.INPUT_CHECKBOX) {\n                    elementsArr.push(input.Input("checkbox"));\n                }\n                else if (element.elementType == ElementType.INPUT_RADIO) {\n                    elementsArr.push(input.Input("radio"));\n                }\n                else {\n                    elementsArr.push(input.Input("input"));\n                }\n                //}\n            });\n            return form.Form(this.buttonText, "button button3", elementsArr, this.labels);\n        };\n        this.id = id;\n        this.className = className;\n        this.buttonText = buttonText;\n        this.elements = elements;\n        this.labels = labels;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/forms/FormData.ts\nconst FormData = (form) => {\n    const inputs = form.querySelectorAll(\'input\');\n    let values = {};\n    inputs.forEach(input => {\n        values[input.id] = input.value;\n    });\n    return values;\n};\n\n;// CONCATENATED MODULE: ./src/components/features/forms/Signup.ts\n\n\n\nclass Signup {\n    constructor() {\n        this._state = {};\n        this._elementModels = [];\n        this.usernameEventBinding = (e) => {\n            let y = e;\n            console.log(y.detail);\n            this._state.username = y.detail;\n        };\n        /**\n         *\n         * @param e Event for Form\'s OnSubmitEventHandler\n         * Any logic to post form data to some API should go here\n         */\n        this.submitEvent = (e) => {\n            e.preventDefault();\n            //console.log(email.value);\n            //console.log(password.value);\n            //const addressValue = document.querySelector("#address") as HTMLInputElement;\n            //console.log("Address value is" +addressValue.value);\n            let signupFormById = document.querySelector("#signup");\n            let data = FormData(signupFormById);\n            console.log(data);\n        };\n        this.render = () => {\n            this._elementModels =\n                [\n                    {\n                        id: "fullname",\n                        className: "inputClass",\n                        elementType: ElementType.INPUT_TEXT,\n                        dispatcherName: "fullnameDispatcher",\n                        eventType: "input",\n                        label: "Fullname"\n                    },\n                    {\n                        id: "username",\n                        className: "inputClass",\n                        elementType: ElementType.INPUT_TEXT,\n                        dispatcherName: "usernameDispatcher",\n                        eventType: "input",\n                        label: "Username"\n                    },\n                    {\n                        id: "password",\n                        className: "inputClass",\n                        elementType: ElementType.INPUT_PASSWORD,\n                        dispatcherName: "passwordDispatcher",\n                        eventType: "input",\n                        label: "Password"\n                    }\n                ];\n            let labels = this._elementModels.map(x => x.label);\n            let form = new CreateForm("signup", "signup", "Sign up", this._elementModels, labels).build();\n            form.addEventListener("submit", this.submitEvent);\n            document.addEventListener(this._elementModels[0].dispatcherName, this.usernameEventBinding);\n            return form;\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/pages/Registration.ts\n\n\n\n\n\nclass Registration {\n    constructor(divRoot) {\n        this.formHeader = new Component("").CreateH("h2", "Sign up", "", "");\n        this.formHeader.setAttribute("style", "text-align: center; margin-top:20px");\n        //let divRoot = document.querySelector("#root") as HTMLInputElement;\n        divRoot.innerHTML = "";\n        divRoot.appendChild(HeaderComponent);\n        divRoot.appendChild(SubHeaderComponent);\n        divRoot.appendChild(this.formHeader);\n        //divRoot.appendChild(HeaderEndsComponent);\n        divRoot.appendChild(new Signup().render());\n        divRoot.appendChild(new Footer(FooterContent).render());\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/features/forms/Login.ts\n\n\n\nclass Login {\n    constructor() {\n        this._elementModels = [];\n        this.usernameEventBinding = (e) => {\n            let y = e;\n            //console.log(y.detail);   \n        };\n        /**\n         *\n         * @param e Event for Form\'s OnSubmitEventHandler\n         * Any logic to post form data to some API should go here\n         */\n        this.submitEvent = (e) => {\n            e.preventDefault();\n            //console.log(email.value);\n            //console.log(password.value);\n            //const addressValue = document.querySelector("#address") as HTMLInputElement;\n            //console.log("Address value is" +addressValue.value);\n            let signupFormById = document.querySelector("#signin");\n            let data = FormData(signupFormById);\n            console.log(data);\n        };\n        this.render = () => {\n            this._elementModels =\n                [\n                    {\n                        id: "username",\n                        className: "inputClass",\n                        elementType: ElementType.INPUT_TEXT,\n                        dispatcherName: "usernameDispatcher",\n                        eventType: "input",\n                        label: "Username"\n                    },\n                    {\n                        id: "password",\n                        className: "inputClass",\n                        elementType: ElementType.INPUT_PASSWORD,\n                        dispatcherName: "passwordDispatcher",\n                        eventType: "input",\n                        label: "Password"\n                    }\n                ];\n            let labels = this._elementModels.map(x => x.label);\n            let form = new CreateForm("signin", "signup", "Sign in", this._elementModels, labels).build();\n            form.addEventListener("submit", this.submitEvent);\n            document.addEventListener(this._elementModels[0].dispatcherName, this.usernameEventBinding);\n            return form;\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/pages/SignInPage.ts\n\n\n\n\n\nclass SignInPage {\n    constructor(divRoot) {\n        this.formHeader = new Component("").CreateH("h2", "Sign in", "", "");\n        this.formHeader.setAttribute("style", "text-align: center; margin-top:20px");\n        //let divRoot = document.querySelector("#root") as HTMLInputElement;\n        divRoot.innerHTML = "";\n        divRoot.appendChild(HeaderComponent);\n        divRoot.appendChild(SubHeaderComponent);\n        divRoot.appendChild(this.formHeader);\n        divRoot.appendChild(new Login().render());\n        divRoot.appendChild(new Footer(FooterContent).render());\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\nlet init = () => {\n    let currentURL = window.location.href;\n    let routerArray = currentURL.split("/");\n    let currentRoute = routerArray[routerArray.length - 1];\n    let divRoot = document.querySelector("#root");\n    if (currentRoute.includes("features")) {\n        new FeaturesPage(divRoot);\n    }\n    else if (currentRoute.includes("signup")) {\n        new Registration(divRoot);\n        //new SignInPage(divRoot);\n    }\n    else if (currentRoute.includes("login")) {\n        new SignInPage(divRoot);\n    }\n    else if (currentRoute.includes("howitworks")) {\n        new HowitworksPage(divRoot);\n    }\n    else {\n        new App().render(divRoot);\n    }\n};\ninit();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///114\n')})();